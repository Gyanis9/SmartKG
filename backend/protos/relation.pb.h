// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: relation.proto
// Protobuf C++ Version: 5.29.3

#ifndef relation_2eproto_2epb_2eh
#define relation_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_relation_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_relation_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_relation_2eproto;
namespace protos {
class PredictRequest;
struct PredictRequestDefaultTypeInternal;
extern PredictRequestDefaultTypeInternal _PredictRequest_default_instance_;
class PredictResponse;
struct PredictResponseDefaultTypeInternal;
extern PredictResponseDefaultTypeInternal _PredictResponse_default_instance_;
}  // namespace protos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace protos {

// ===================================================================


// -------------------------------------------------------------------

class PredictResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protos.PredictResponse) */ {
 public:
  inline PredictResponse() : PredictResponse(nullptr) {}
  ~PredictResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PredictResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PredictResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PredictResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline PredictResponse(const PredictResponse& from) : PredictResponse(nullptr, from) {}
  inline PredictResponse(PredictResponse&& from) noexcept
      : PredictResponse(nullptr, std::move(from)) {}
  inline PredictResponse& operator=(const PredictResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PredictResponse& operator=(PredictResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PredictResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PredictResponse* internal_default_instance() {
    return reinterpret_cast<const PredictResponse*>(
        &_PredictResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(PredictResponse& a, PredictResponse& b) { a.Swap(&b); }
  inline void Swap(PredictResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PredictResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PredictResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PredictResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PredictResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PredictResponse& from) { PredictResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PredictResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "protos.PredictResponse"; }

 protected:
  explicit PredictResponse(::google::protobuf::Arena* arena);
  PredictResponse(::google::protobuf::Arena* arena, const PredictResponse& from);
  PredictResponse(::google::protobuf::Arena* arena, PredictResponse&& from) noexcept
      : PredictResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRelationFieldNumber = 1,
    kErrorFieldNumber = 3,
    kConfidenceFieldNumber = 2,
  };
  // string relation = 1;
  void clear_relation() ;
  const std::string& relation() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_relation(Arg_&& arg, Args_... args);
  std::string* mutable_relation();
  PROTOBUF_NODISCARD std::string* release_relation();
  void set_allocated_relation(std::string* value);

  private:
  const std::string& _internal_relation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_relation(
      const std::string& value);
  std::string* _internal_mutable_relation();

  public:
  // string error = 3;
  void clear_error() ;
  const std::string& error() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error(Arg_&& arg, Args_... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* value);

  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(
      const std::string& value);
  std::string* _internal_mutable_error();

  public:
  // float confidence = 2;
  void clear_confidence() ;
  float confidence() const;
  void set_confidence(float value);

  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);

  public:
  // @@protoc_insertion_point(class_scope:protos.PredictResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      44, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PredictResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr relation_;
    ::google::protobuf::internal::ArenaStringPtr error_;
    float confidence_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_relation_2eproto;
};
// -------------------------------------------------------------------

class PredictRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protos.PredictRequest) */ {
 public:
  inline PredictRequest() : PredictRequest(nullptr) {}
  ~PredictRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PredictRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PredictRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PredictRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PredictRequest(const PredictRequest& from) : PredictRequest(nullptr, from) {}
  inline PredictRequest(PredictRequest&& from) noexcept
      : PredictRequest(nullptr, std::move(from)) {}
  inline PredictRequest& operator=(const PredictRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PredictRequest& operator=(PredictRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PredictRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PredictRequest* internal_default_instance() {
    return reinterpret_cast<const PredictRequest*>(
        &_PredictRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(PredictRequest& a, PredictRequest& b) { a.Swap(&b); }
  inline void Swap(PredictRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PredictRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PredictRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PredictRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PredictRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PredictRequest& from) { PredictRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PredictRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "protos.PredictRequest"; }

 protected:
  explicit PredictRequest(::google::protobuf::Arena* arena);
  PredictRequest(::google::protobuf::Arena* arena, const PredictRequest& from);
  PredictRequest(::google::protobuf::Arena* arena, PredictRequest&& from) noexcept
      : PredictRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSentenceFieldNumber = 1,
    kEntity1FieldNumber = 2,
    kEntity2FieldNumber = 3,
  };
  // string sentence = 1;
  void clear_sentence() ;
  const std::string& sentence() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sentence(Arg_&& arg, Args_... args);
  std::string* mutable_sentence();
  PROTOBUF_NODISCARD std::string* release_sentence();
  void set_allocated_sentence(std::string* value);

  private:
  const std::string& _internal_sentence() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sentence(
      const std::string& value);
  std::string* _internal_mutable_sentence();

  public:
  // string entity1 = 2;
  void clear_entity1() ;
  const std::string& entity1() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_entity1(Arg_&& arg, Args_... args);
  std::string* mutable_entity1();
  PROTOBUF_NODISCARD std::string* release_entity1();
  void set_allocated_entity1(std::string* value);

  private:
  const std::string& _internal_entity1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entity1(
      const std::string& value);
  std::string* _internal_mutable_entity1();

  public:
  // string entity2 = 3;
  void clear_entity2() ;
  const std::string& entity2() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_entity2(Arg_&& arg, Args_... args);
  std::string* mutable_entity2();
  PROTOBUF_NODISCARD std::string* release_entity2();
  void set_allocated_entity2(std::string* value);

  private:
  const std::string& _internal_entity2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_entity2(
      const std::string& value);
  std::string* _internal_mutable_entity2();

  public:
  // @@protoc_insertion_point(class_scope:protos.PredictRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      52, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PredictRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr sentence_;
    ::google::protobuf::internal::ArenaStringPtr entity1_;
    ::google::protobuf::internal::ArenaStringPtr entity2_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_relation_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PredictRequest

// string sentence = 1;
inline void PredictRequest::clear_sentence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sentence_.ClearToEmpty();
}
inline const std::string& PredictRequest::sentence() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protos.PredictRequest.sentence)
  return _internal_sentence();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PredictRequest::set_sentence(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sentence_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protos.PredictRequest.sentence)
}
inline std::string* PredictRequest::mutable_sentence() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sentence();
  // @@protoc_insertion_point(field_mutable:protos.PredictRequest.sentence)
  return _s;
}
inline const std::string& PredictRequest::_internal_sentence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sentence_.Get();
}
inline void PredictRequest::_internal_set_sentence(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sentence_.Set(value, GetArena());
}
inline std::string* PredictRequest::_internal_mutable_sentence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.sentence_.Mutable( GetArena());
}
inline std::string* PredictRequest::release_sentence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protos.PredictRequest.sentence)
  return _impl_.sentence_.Release();
}
inline void PredictRequest::set_allocated_sentence(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sentence_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.sentence_.IsDefault()) {
    _impl_.sentence_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PredictRequest.sentence)
}

// string entity1 = 2;
inline void PredictRequest::clear_entity1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entity1_.ClearToEmpty();
}
inline const std::string& PredictRequest::entity1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protos.PredictRequest.entity1)
  return _internal_entity1();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PredictRequest::set_entity1(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entity1_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protos.PredictRequest.entity1)
}
inline std::string* PredictRequest::mutable_entity1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_entity1();
  // @@protoc_insertion_point(field_mutable:protos.PredictRequest.entity1)
  return _s;
}
inline const std::string& PredictRequest::_internal_entity1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.entity1_.Get();
}
inline void PredictRequest::_internal_set_entity1(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entity1_.Set(value, GetArena());
}
inline std::string* PredictRequest::_internal_mutable_entity1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.entity1_.Mutable( GetArena());
}
inline std::string* PredictRequest::release_entity1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protos.PredictRequest.entity1)
  return _impl_.entity1_.Release();
}
inline void PredictRequest::set_allocated_entity1(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entity1_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.entity1_.IsDefault()) {
    _impl_.entity1_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PredictRequest.entity1)
}

// string entity2 = 3;
inline void PredictRequest::clear_entity2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entity2_.ClearToEmpty();
}
inline const std::string& PredictRequest::entity2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protos.PredictRequest.entity2)
  return _internal_entity2();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PredictRequest::set_entity2(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entity2_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protos.PredictRequest.entity2)
}
inline std::string* PredictRequest::mutable_entity2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_entity2();
  // @@protoc_insertion_point(field_mutable:protos.PredictRequest.entity2)
  return _s;
}
inline const std::string& PredictRequest::_internal_entity2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.entity2_.Get();
}
inline void PredictRequest::_internal_set_entity2(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entity2_.Set(value, GetArena());
}
inline std::string* PredictRequest::_internal_mutable_entity2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.entity2_.Mutable( GetArena());
}
inline std::string* PredictRequest::release_entity2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protos.PredictRequest.entity2)
  return _impl_.entity2_.Release();
}
inline void PredictRequest::set_allocated_entity2(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entity2_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.entity2_.IsDefault()) {
    _impl_.entity2_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PredictRequest.entity2)
}

// -------------------------------------------------------------------

// PredictResponse

// string relation = 1;
inline void PredictResponse::clear_relation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.relation_.ClearToEmpty();
}
inline const std::string& PredictResponse::relation() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protos.PredictResponse.relation)
  return _internal_relation();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PredictResponse::set_relation(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.relation_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protos.PredictResponse.relation)
}
inline std::string* PredictResponse::mutable_relation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_relation();
  // @@protoc_insertion_point(field_mutable:protos.PredictResponse.relation)
  return _s;
}
inline const std::string& PredictResponse::_internal_relation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.relation_.Get();
}
inline void PredictResponse::_internal_set_relation(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.relation_.Set(value, GetArena());
}
inline std::string* PredictResponse::_internal_mutable_relation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.relation_.Mutable( GetArena());
}
inline std::string* PredictResponse::release_relation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protos.PredictResponse.relation)
  return _impl_.relation_.Release();
}
inline void PredictResponse::set_allocated_relation(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.relation_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.relation_.IsDefault()) {
    _impl_.relation_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PredictResponse.relation)
}

// float confidence = 2;
inline void PredictResponse::clear_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.confidence_ = 0;
}
inline float PredictResponse::confidence() const {
  // @@protoc_insertion_point(field_get:protos.PredictResponse.confidence)
  return _internal_confidence();
}
inline void PredictResponse::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:protos.PredictResponse.confidence)
}
inline float PredictResponse::_internal_confidence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.confidence_;
}
inline void PredictResponse::_internal_set_confidence(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.confidence_ = value;
}

// string error = 3;
inline void PredictResponse::clear_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_.ClearToEmpty();
}
inline const std::string& PredictResponse::error() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protos.PredictResponse.error)
  return _internal_error();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PredictResponse::set_error(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protos.PredictResponse.error)
}
inline std::string* PredictResponse::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:protos.PredictResponse.error)
  return _s;
}
inline const std::string& PredictResponse::_internal_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_.Get();
}
inline void PredictResponse::_internal_set_error(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_.Set(value, GetArena());
}
inline std::string* PredictResponse::_internal_mutable_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.error_.Mutable( GetArena());
}
inline std::string* PredictResponse::release_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:protos.PredictResponse.error)
  return _impl_.error_.Release();
}
inline void PredictResponse::set_allocated_error(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:protos.PredictResponse.error)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // relation_2eproto_2epb_2eh
